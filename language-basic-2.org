* Python 언어의 기초 2: 자료형

Python3에는 아래와 같은 주요 자료형(type)이 있습니다.

 - Boolean types: None, True, False
 - Numeric types: int, float
 - Sequence types: list, tuple
 - Text sequence types: str
 - Byte sequence types: bytes

** 상수형 자료형

우선, 아래와 같은 상수형 자료형들이 있습니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-
# boolean
True
False
10         # int
10.5       # float
int(10.5)  # to integer
float(10)  # to float
#+END_SRC

** list, tuple

그리고 배열 형태의 자료형으로는 =list= 와 =tuple= 이 대표적입니다. =list= 와 =tuple= 은 거의 비슷하게 사용할 수 있으나, =list= 는 처음 생성한 이후에도 원소를 추가, 제거하는 등 변경을 가할 수 있지만, =tuple= 은 원소에 변경을 가할 수 없습니다.

#+BEGIN_SRC python :results output :exports code
a_list = [1, 2, 3, 4, 5]   # list
b_list = (1, 2, 3, 4, 5)
c_list = [6, 7, 8]

a_list[2] == 3              # 특정 위치의 원소 참조. 참조번호는 0번부터 시작.
a_list[-1] == 5             # 음수인 경우, 뒤에서부터 접근.
a_list[2:4] == [3,4,5]      # 참조번호 2부터 4까지를 잘라서(slice) 반환함.
a_list[2:] == [3,4,5]       # 참조번호 2부터 끝까지를 잘라서(slice) 반환함.
1 in a_list == True         # 1이라는 값이 리스트에 존재하는지 여부를 반환.
a_list + c_list == [1, 2, 3, 4, 5, 6, 7, 8]     # 두 리스트를 합친 새 리스트 반환.

a_list.append(6)     # 맨 뒤에 6이라는 새 원소를 추가.
a_list.insert(0, -1) # 0번째 참조번호에 -1이라는 새 원소를 추가.
a_list.pop(0)        # 0번째 원소를 리스트에서 제거.

a_list[2] = 0        # 참조번호 2번의 값을 0으로 변경
#+END_SRC


=tuple= 에 대해서는 변경을 가할 수 없기 때문에, =append=, =insert=, =pop= 등의 조작은 할 수 없습니다. 

=list= 및 =tuple= 에는 숫자 뿐 아니라 모든 자료형을 담을 수 있으며, 원소끼리 동질의 자료형을 가지지 않아도 됩니다.

#+BEGIN_SRC python :results output :exports code
['Tom', 'Chris', 'Timothy', 'Dan', 'Esther']     # 문자열의 리스트.
['a', 1, 'c', 2, 'e', 3]                         # 여러 타입이 섞인 리스트.
[['a', 1], ['c', 2], ['e', 3]]                   # 리스트로 이루어진 리스트.

[['Tom', 'M', 15, True], 
 ['Chris', 'F', 28, True], 
 ['Timothy', 'M', 32, False]]                    # 리스트로 이루어진 리스트.
#+END_SRC

=list= 및 =tuple= 은 =for= 구문과 함께 사용할 수 있습니다.

#+BEGIN_SRC python :results output :exports both
name_list = ('Tom', 'Chris', 'Timothy', 'Dan', 'Esther')
for name in name_list:
    print(name)
#+END_SRC

#+RESULTS:
: Tom
: Chris
: Timothy
: Dan
: Esther

다음과 같이 일종의 행과 열로 이루어진 반복도 가능합니다.

#+BEGIN_SRC python :results output :exports both
a_list = [['Tom', 'M', 15, True], 
          ['Chris', 'F', 28, True], 
          ['Timothy', 'M', 32, False]]

for row in a_list:
    if row[2] > 20:
        print(row)
#+END_SRC

#+RESULTS:
: ['Chris', 'F', 28, True]
: ['Timothy', 'M', 32, False]


** dict

이번에는 =dict= 에 대해 알아봅니다.

=dict= 는, 특정한 key에 대해 value를 기억하는 자료형입니다. 우선 =dict= 에 값을 저장하고 인출하는 기본적인 동작을 알아봅시다.

#+BEGIN_SRC python :results output :exports both
a_dict = dict()     # dict를 생성
a_dict = {}         # dict를 생성 (위와 동일)

a_dict['0'] = 3          # '0'이라는 공간(key)에 3이라는 값을 저장
a_dict['Tom'] = 'M'      # 'Tom'이라는 공간에 'M'이라는 값을 저장

# a_dict['Heidi']          # KeyError 발생
a_dict.get('Heidi')      # None 반환
a_dict.get('Heidi', '?') # '?' 반환

b_dict = {'0': 3, 'Tom': 'M'}   # {} 표현형으로 dict 정의

a_dict == b_dict         # 값을 하나씩 넣어서 구성한 dict와, {} 표현형으로 정의한 dict는 결과가 동일

print(a_dict)
#+END_SRC

#+RESULTS:
: {'Tom': 'M', '0': 3}

이어서, 조금 더 복잡한 사용법을 알아봅시다.

#+BEGIN_SRC python :results output :exports both
a_dict = {'Tom': 15, 'Chris': 28, 'Timothy': 32}

'Tom' in a_dict == True           # dict에 'Tom'이라는 키가 존재하는지 확인
a_dict.setdefault('Jenny', 20)    # Jenny라는 공간(key)이 없었다면 공간을 마련하고 20을 할당
a_dict.setdefault('Tom', 20)      # Tom이라는 공간(key)이 없었다면 공간을 마련하고 20을 할당, 아니라면 무시

print(a_dict['Jenny'] == 20)
print(a_dict['Tom'] == 15)
#+END_SRC

#+RESULTS:
: True
: True

#+BEGIN_SRC python :results output :exports both
a_dict = {'Tom': 15, 'Chris': 28, 'Timothy': 32}

print(a_dict.keys())   # dict에 마련된 공간 이름(key) 목록을 리스트로 반환
print(a_dict.values()) # dict에 저장된 값의 목록을 리스트로 반환
print(a_dict.items())  # dict에 저장된 공간 이름과 값의 목록을 중첩된 리스트로 반환
#+END_SRC

#+RESULTS:
: dict_keys(['Timothy', 'Tom', 'Chris'])
: dict_values([32, 15, 28])
: dict_items([('Timothy', 32), ('Tom', 15), ('Chris', 28)])


#+BEGIN_SRC python :results output :exports code
a_dict = {'Tom': 15, 'Chris': 28, 'Timothy': 32}

a_dict.pop('Tom')       # dict에서 'Tom' 공간을 제거하면서 그 값을 반환
del a_dict['Tom']       # dict에서 'Tom' 공간을 제거
#+END_SRC


** set

이번에는 =set= 에 대해 알아봅시다.


** str (문자열)

데이터 분석을 하면서 가장 많이 사용하게 될 작업 중 하나가 문자열을 다루는 것입니다. 여기서는 문자열에 대해서 조금 더 자세히 살펴봅시다.

 - concat
 - split
 - contains(in)
 - find, rfind
 - slicing
 - startswith
 - regex
 - encoding

#+BEGIN_SRC python :results output :exports both
'Hello' + ' World' == 'Hello World'                               # 두 개의 문자열을 합친 새 문자열을 반환
'Hello Python World!'.split(' ') == ['Hello', 'Python', 'World!'] # 문자열을 구분자를 기준으로 잘라 리스트로 반환
'Hello' in 'Hello World' is True                                  # 특정 문자열이 포함되어 있는지 여부를 확인

'Tom, Hello, World!'.find(',') == 3                               # 특정 문자 또는 문자열이 처음 등장하는 위치를 반환
'Tom, Hello, World!'.find(',') == 10                              # 특정 문자 또는 문자열이 처음 등장하는 위치를 반환

'Hello Python World!'[6] == 'P'                # 특정 위치의 문자를 반환 (list와 비슷)
'Hello Python World!'[6:12] == 'Python'        # 특정 범위의 문자열을 반환
'Hello Python World!'[6:] == 'Python World!'   # 특정 범위의 문자열을 반환

len('Hello') == 5                              # 문자열의 길이를 반환
'Hello'.startswith('He') is True               # 문자열이 특정 문자열로 시작하는지 여부를 반환
'Hello'.endswith('lo') is True                 # 문자열이 특정 문자열로 끝나는지 여부를 반환
'   Hello World    '.strip() == 'Hello World'  # 문자열의 앞뒤에 있는 공백 및 개행을 제거하여 반환
'Hello World'.lower() == 'hello world'         # 문자열을 소문자로 변환하여 반환
'Hello World'.upper() == 'HELLO WORLD'         # 문자열을 대문자로 변환하여 반환

# 템플릿을 바탕으로 문자열을 생성하여 반환
'Hey {}, Welcome to {} World!'.format('Tom', 'Python') == 'Hey Tom, Welcome to Python World!'

# 리스트에 담긴 문자열들 구분자를 사용하여 하나의 문자열로 결합하여 반환
' '.join(['Welcome', 'to', 'Python', 'World']) == 'Welcome to Python World'
#+END_SRC

이번에는 인코딩에 대해서 알아보겠습니다. 한글을 다루게 되면 꼭 한 번은 이해하고 넘어가야 할 내용입니다.

우선 인코딩이란 무엇일까요?
