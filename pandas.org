* TODO Pandas 소개

#+BEGIN_SRC ipython :session :exports none
  %matplotlib inline
  from tabulate import tabulate

  def tab(df):
      print(tabulate(df, headers='keys', tablefmt='orgtbl'))
#+END_SRC

Pandas는 Python으로 작성된 데이터 분석 도구입니다. Python의 패키지 형태로 제공되어, Python 언어 내에 쉽게 섞어 사용할 수 있습니다.

 - [-] Data structure
   - [X] Series
   - [-] DataFrame
     - [X] Creation
       - [X] from_dict()
     - [X] .shape
     - [X] .columns
     - [X] Sort
       - [X] sort_index()
       - [X] sort_values()
       - [X] rank()
     - [ ] unique()
     - [ ] rename()
     - [ ] fillna()
 - [ ] Row/Column selection
   - [ ] head()
   - [ ] tail()
   - [ ] sampling
     - [ ] sample(n=10)
     - [ ] sample(frac=0.6)
   - [ ] where()
   - [ ] Boolean indexing
 - [ ] Index
   - [ ] reindex()
   - [ ] reset_index()
 - [ ] Data Transform
   - [ ] map()
   - [ ] apply()
   - [ ] applymap()
 - [ ] Reshaping
   - [ ] merge()
   - [ ] melt()
   - [ ] crosstab()
   - [ ] pivot_table()
     - [ ] margins
   - [ ] groupby()
 - [ ] Data Type
   - [ ] astype()
   - [ ] to_numeric()
   - [ ] to_datetime()
   - [ ] to_timedelta()


** Data structure

Pandas에서 주요한 데이터 요소로, ~Series~ 와 ~DataFrame~ 이 있습니다.

~Series~ 는 1차원 배열이라고 볼 수 있습니다. 간단한 예는 아래와 같습니다.

#+BEGIN_SRC ipython :session :results raw :exports both
  import pandas as pd
  s = pd.Series([17.8, 25.3, 18.2, 3, 5])
  s
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  0    1
  1    2
  2    3
  3    4
  4    5
  dtype: int64
#+END_EXAMPLE

Series에 여러 가지 정보를 덧붙일 수 있습니다.

#+BEGIN_SRC ipython :session :results raw :exports both
  import pandas as pd
  population = pd.Series([51181299, 8468555, 1281935911, 10248069, 53950935],
                         index=['한국', '타지키스탄', '인도', '요르단', '탄자니아'],
                         name='인구')
  population
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  한국         51181299
  타지키스탄       8468555
  인도       1281935911
  요르단        10248069
  탄자니아       53950935
  Name: 인구, dtype: int64
#+END_EXAMPLE

#+BEGIN_SRC ipython :session :results raw :exports both
  import pandas as pd
  index = ['한국', '타지키스탄', '인도', '요르단', '탄자니아']
  birth_rate = pd.Series([8.3, 23.3, 19, 23.9, 35.6],
                         index=index,
                         name='출산율(1000명당)')
  unemployment_rate = pd.Series([0.107, 0.167, 0.107, 0.293, 0.094],
                                index=index,
                                name='실업율(15-24세)')
#+END_SRC

~DataFrame~ 은 여러개의 ~Series~ 를 모아놓은 것입니다. 간단히 여러 행과 열로 이루어진 엑셀 시트를 생각하시면 되겠습니다.

#+BEGIN_SRC ipython :session :results raw :exports code
  import pandas as pd
  df_countries = pd.DataFrame({'인구': population, '출산율(1000명당)': birth_rate, '실업율(15-24세)': unemployment_rate})
  df_countries
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
tab(df_countries)
#+END_SRC
#+RESULTS:
|            | 실업율(15-24세) |        인구 | 출산율(1000명당) |
|------------+-----------------+-------------+------------------|
| 한국       |           0.107 | 5.11813e+07 |              8.3 |
| 타지키스탄 |           0.167 | 8.46856e+06 |             23.3 |
| 인도       |           0.107 | 1.28194e+09 |               19 |
| 요르단     |           0.293 | 1.02481e+07 |             23.9 |
| 탄자니아   |           0.094 | 5.39509e+07 |             35.6 |

~DataFrame~ 의 모양, 그리고 컬럼 목록을 아래와 같이 확인할 수 있습니다.

#+BEGIN_SRC ipython :session :results output :exports both
  print(df_countries.shape)
  print(df_countries.columns)
#+END_SRC

#+RESULTS:
: (5, 3)
: Index(['실업율(15-24세)', '인구', '출산율(1000명당)'], dtype='object')


~Series~ 를 통하지 않고 곧바로 ~DataFrame~ 을 생성할 수 있습니다.

#+BEGIN_SRC ipython :session :results raw :exports code
  import pandas as pd
  df_countries = pd.DataFrame([[51181299, 8.3, 0.107],
                               [8468555, 23.3, 0.167],
                               [1281935911, 19, 0.107],
                               [10248069, 23.9, 0.293],
                               [53950935, 35.6, 0.094]],
                              index=['한국', '타지키스탄', '인도', '요르단', '탄자니아'],
                              columns=['인구', '출산율(1000명당)', '실업율(15-24세)'])
  df_countries
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
tab(df_countries)
#+END_SRC

#+RESULTS:
|            |        인구 | 출산율(1000명당) | 실업율(15-24세) |
|------------+-------------+------------------+-----------------|
| 한국       | 5.11813e+07 |              8.3 |           0.107 |
| 타지키스탄 | 8.46856e+06 |             23.3 |           0.167 |
| 인도       | 1.28194e+09 |               19 |           0.107 |
| 요르단     | 1.02481e+07 |             23.9 |           0.293 |
| 탄자니아   | 5.39509e+07 |             35.6 |           0.094 |


웹으로부터 JSON 데이터를 가져오는 경우에는 데이터가 ~dict~ 형태가 됩니다.


#+BEGIN_SRC javascript
  json_data = [
    {"이름": "한국", "인구": 51181299, "출산율(1000명당)": 8.3, "실업율(15-24세)": 0.107},
    {"이름": "타지키스탄", "인구": 8468555, "출산율(1000명당)": 23.3, "실업율(15-24세)": 0.167},
    {"이름": "인도", "인구": 1281935911, "출산율(1000명당)": 19, "실업율(15-24세)": 0.107},
    {"이름": "요르단", "인구": 10248069, "출산율(1000명당)": 23.9, "실업율(15-24세)": 0.293},
    {"이름": "탄자니아", "인구": 53950935, "출산율(1000명당)": 35.6, "실업율(15-24세)": 0.094}
  ]
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports none
  json_data = [
    {"이름": "한국", "인구": 51181299, "출산율(1000명당)": 8.3, "실업율(15-24세)": 0.107},
    {"이름": "타지키스탄", "인구": 8468555, "출산율(1000명당)": 23.3, "실업율(15-24세)": 0.167},
    {"이름": "인도", "인구": 1281935911, "출산율(1000명당)": 19, "실업율(15-24세)": 0.107},
    {"이름": "요르단", "인구": 10248069, "출산율(1000명당)": 23.9, "실업율(15-24세)": 0.293},
    {"이름": "탄자니아", "인구": 53950935, "출산율(1000명당)": 35.6, "실업율(15-24세)": 0.094}
  ]
#+END_SRC

#+BEGIN_SRC ipython :session :results raw :exports code
  df_countries = pd.DataFrame.from_dict(json_data)
  df_countries
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
  tab(df_countries)
#+END_SRC

#+RESULTS:
|   | 실업율(15-24세) | 이름       |       인구 | 출산율(1000명당) |
|---+-----------------+------------+------------+------------------|
| 0 |           0.107 | 한국       |   51181299 |              8.3 |
| 1 |           0.167 | 타지키스탄 |    8468555 |             23.3 |
| 2 |           0.107 | 인도       | 1281935911 |               19 |
| 3 |           0.293 | 요르단     |   10248069 |             23.9 |
| 4 |           0.094 | 탄자니아   |   53950935 |             35.6 |

그런데 이 경우에는 다른 경우와는 달리 국가명이 일반 컬럼으로 들어가 있습니다. 이렇듯 특정 컬럼을 인덱스로 만들기 위해서는 아래와 같이 합니다.

#+BEGIN_SRC ipython :session :results raw :exports code
  df_countries = df_countries.set_index('이름')
  df_countries
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
  tab(df_countries)
#+END_SRC
#+RESULTS:
| 이름       | 실업율(15-24세) |        인구 | 출산율(1000명당) |
|------------+-----------------+-------------+------------------|
| 한국       |           0.107 | 5.11813e+07 |              8.3 |
| 타지키스탄 |           0.167 | 8.46856e+06 |             23.3 |
| 인도       |           0.107 | 1.28194e+09 |               19 |
| 요르단     |           0.293 | 1.02481e+07 |             23.9 |
| 탄자니아   |           0.094 | 5.39509e+07 |             35.6 |

인덱스를 해제하여 일반 컬럼으로 만들기 위해서는 ~reset_index~ 를 사용합니다.

#+BEGIN_SRC ipython :session :results raw :exports code
  df_countries.reset_index()
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
  tab(df_countries.reset_index())
#+END_SRC

#+RESULTS:
|   | 이름       | 실업율(15-24세) |       인구 | 출산율(1000명당) |
|---+------------+-----------------+------------+------------------|
| 0 | 한국       |           0.107 |   51181299 |              8.3 |
| 1 | 타지키스탄 |           0.167 |    8468555 |             23.3 |
| 2 | 인도       |           0.107 | 1281935911 |               19 |
| 3 | 요르단     |           0.293 |   10248069 |             23.9 |
| 4 | 탄자니아   |           0.094 |   53950935 |             35.6 |

실업율이 높은 순서대로 한 번 살펴볼까요?

#+BEGIN_SRC ipython :session :results raw :exports code
  df_countries.sort_values('실업율(15-24세)', ascending=False)
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
  tab(df_countries.sort_values('실업율(15-24세)', ascending=False))
#+END_SRC

#+RESULTS:
|            | 실업율(15-24세) |        인구 | 출산율(1000명당) |
|------------+-----------------+-------------+------------------|
| 요르단     |           0.293 | 1.02481e+07 |             23.9 |
| 타지키스탄 |           0.167 | 8.46856e+06 |             23.3 |
| 한국       |           0.107 | 5.11813e+07 |              8.3 |
| 인도       |           0.107 | 1.28194e+09 |               19 |
| 탄자니아   |           0.094 | 5.39509e+07 |             35.6 |

~ascending~ 옵션을 주지 않으면 오름차순으로 정렬합니다.

이번엔 인덱스 순서, 즉 국가 이름 순서대로 정렬을 해봅시다.

#+BEGIN_SRC ipython :session :results raw :exports code
  df_countries.sort_index(ascending=False)
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
  tab(df_countries.sort_index(ascending=False))
#+END_SRC

#+RESULTS:
|            | 실업율(15-24세) |        인구 | 출산율(1000명당) |
|------------+-----------------+-------------+------------------|
| 한국       |           0.107 | 5.11813e+07 |              8.3 |
| 탄자니아   |           0.094 | 5.39509e+07 |             35.6 |
| 타지키스탄 |           0.167 | 8.46856e+06 |             23.3 |
| 인도       |           0.107 | 1.28194e+09 |               19 |
| 요르단     |           0.293 | 1.02481e+07 |             23.9 |

위에서 index 지정이나 해제, 정렬 등을 할 때 살펴봤듯이, pandas에서 대부분의 행동은 원본 데이터를 수정하지 않고 복사본을 반환하는 형태로 동작합니다.

눈으로 정렬해서 보는 것 말고, 수치화해서 나타내려면 어떻게 할까요?

#+BEGIN_SRC ipython :session :results raw :exports code
  df_countries.rank()
#+END_SRC

#+BEGIN_SRC ipython :session :results raw output :exports result
  tab(df_countries.rank())
#+END_SRC

#+RESULTS:
|            | 실업율(15-24세) | 인구 | 출산율(1000명당) |
|------------+-----------------+------+------------------|
| 한국       |             2.5 |    3 |                1 |
| 타지키스탄 |               4 |    1 |                3 |
| 인도       |             2.5 |    5 |                2 |
| 요르단     |               5 |    2 |                4 |
| 탄자니아   |               1 |    4 |                5 |




** Row/Column selection

** Index

** Data Transform

** Reshaping

** Data Type Conversion
