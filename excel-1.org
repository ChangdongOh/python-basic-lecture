* 엑셀 대체하기

그러면 본격적으로 엑셀로 하던 작업을 pandas를 사용하여 수행해봅시다.

(여기서 사용한 일부 데이터는, 통계청 산하 통계교육원의 [[https://sti.kostat.go.kr/coresti/site/board/StudentBoardViewList.do][이러닝 실습 자료]]를 사용하였습니다.)

#+BEGIN_SRC ipython :session :exports none
%matplotlib inline
from tabulate import tabulate

def tab(df):
    print(tabulate(df, headers='keys', tablefmt='orgtbl'))
#+END_SRC

** 엑셀 파일 읽어들이기

우선, 데이터로 사용할 엑셀 파일을 jupyter notebook으로 읽어들입니다.

#+BEGIN_SRC ipython :session :exports code :results raw
import pandas as pd

df = pd.read_excel('assets/엑셀과정실습생.xlsx', sheet_name='Sheet1')
df
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
    번호  나이  성별  신장(cm)  몸무게(kg)  즐기는 음식
  0    1  30   1     183       82       1
  1    2  28   2     160       62       3
  2    3  27   1     178       77       2
  3    4  23   1     172       70       2
  4    5  25   1     168       72       3
  5    6  27   1     179       77       1
  6    7  26   1     169       71       1
  7    8  29   1     171       75       3
  8    9  34   2     158       60       2
  9   10  31   1     183       77       3
  10  11  26   2     162       59       1
  11  12  26   1     173       70       2
  12  13  35   1     173       68       3
  13  14  24   1     176       66       3
  14  15  29   2     170       70       2
  15  16  33   1     177       72       2
  16  17  38   2     159       55       1
  17  18  26   1     166       69       3
  18  19  26   1     169       66       2
  19  20  28   2     159       60       2
#+END_EXAMPLE

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df)
#+END_SRC

#+RESULTS:
|    | 번호 | 나이 | 성별 | 신장(cm) | 몸무게(kg) | 즐기는 음식 |
|----+------+------+------+----------+------------+-------------|
|  0 |    1 |   30 |    1 |      183 |         82 |           1 |
|  1 |    2 |   28 |    2 |      160 |         62 |           3 |
|  2 |    3 |   27 |    1 |      178 |         77 |           2 |
|  3 |    4 |   23 |    1 |      172 |         70 |           2 |
|  4 |    5 |   25 |    1 |      168 |         72 |           3 |
|  5 |    6 |   27 |    1 |      179 |         77 |           1 |
|  6 |    7 |   26 |    1 |      169 |         71 |           1 |
|  7 |    8 |   29 |    1 |      171 |         75 |           3 |
|  8 |    9 |   34 |    2 |      158 |         60 |           2 |
|  9 |   10 |   31 |    1 |      183 |         77 |           3 |
| 10 |   11 |   26 |    2 |      162 |         59 |           1 |
| 11 |   12 |   26 |    1 |      173 |         70 |           2 |
| 12 |   13 |   35 |    1 |      173 |         68 |           3 |
| 13 |   14 |   24 |    1 |      176 |         66 |           3 |
| 14 |   15 |   29 |    2 |      170 |         70 |           2 |
| 15 |   16 |   33 |    1 |      177 |         72 |           2 |
| 16 |   17 |   38 |    2 |      159 |         55 |           1 |
| 17 |   18 |   26 |    1 |      166 |         69 |           3 |
| 18 |   19 |   26 |    1 |      169 |         66 |           2 |
| 19 |   20 |   28 |    2 |      159 |         60 |           2 |

** 기초 통계

가장 간단히, 수강생들의 키에 대한 최소, 최대, 평균과 표준편차 등을 알아봅시다.

#+BEGIN_SRC ipython :session :exports both :results raw
df['신장(cm)'].describe()
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  count     20.00000
  mean     170.25000
  std        7.81951
  min      158.00000
  25%      165.00000
  50%      170.50000
  75%      176.25000
  max      183.00000
  Name: 신장(cm), dtype: float64
#+END_EXAMPLE


** 빈도 분석

이번에는, 데이터별로 빈도가 어떻게 되는지 살펴봅시다.

우선 성별 비율이 어떻게 되는지 살펴봅니다. 성별 각각의 빈도는 아래와 같이 살펴볼 수 있습니다.

#+BEGIN_SRC ipython :session :exports both :results raw
pd.value_counts(df['성별'])
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  1    14
  2     6
  Name: 성별, dtype: int64
#+END_EXAMPLE

빈도 대신 비율을 살펴보려면 아래와 같이 ~normalize~ 옵션을 추가합니다. 최대 1의 값을 가지는 소숫점이 나오고, 100을 곱하면 퍼센트로 나타낼 수 있습니다.

#+BEGIN_SRC ipython :session :exports both :results raw
pd.value_counts(df['성별'], normalize=True)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  1    0.7
  2    0.3
  Name: 성별, dtype: float64
#+END_EXAMPLE

#+BEGIN_SRC ipython :session :exports both :results raw
pd.value_counts(df['성별'], normalize=True) * 100
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
  1    70.0
  2    30.0
  Name: 성별, dtype: float64
#+END_EXAMPLE

성별에 대한 빈도와 비율을 함께 표시해봅시다.

#+BEGIN_SRC ipython :session :exports code :results raw
freq = pd.value_counts(df['성별'])
ratio = pd.value_counts(df['성별'], normalize=True) * 100
df_freq = pd.DataFrame([freq, ratio], index=['빈도', '비율(%)'])
df_freq
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_freq)
#+END_SRC

#+RESULTS:
|         |  1 |  2 |
|---------+----+----|
| 빈도    | 14 |  6 |
| 비율(%) | 70 | 30 |

빈도를 나타내는 ~series~ 를 하나, 비율을 나타내는 ~series~ 를 하나 생성하고, ~DataFrame~ 을 사용하여 두 요소를 하나의 표로 묶어줍니다.


** 피벗 테이블

엑셀에서 편리하게 사용하는 기능 중 하나가 피벗 테이블입니다. pandas로는 피벗 테이블을 어떻게 만들까요?

아래와 같이 성별에 따른 값의 차이를 피벗 테이블로 살펴봅시다.

#+BEGIN_SRC ipython :session :exports code :results raw
df_pv_1 = pd.pivot_table(df, index='성별')
df_pv_1
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_pv_1)
#+END_SRC

#+RESULTS:
| 성별 |    나이 | 몸무게(kg) |    번호 | 신장(cm) | 즐기는 음식 |
|------+---------+------------+---------+----------+-------------|
|    1 | 27.7143 |    72.2857 | 9.71429 |  174.071 |     2.21429 |
|    2 |    30.5 |         61 | 12.3333 |  161.333 |     1.83333 |

소숫점 자릿수를 일치시켜봅시다.

#+BEGIN_SRC ipython :session :exports code :results raw
df_pv_1 = pd.pivot_table(df, index='성별')
df_pv_1.apply(lambda x: round(x, 2))
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_pv_1.apply(lambda x: round(x, 2)))
#+END_SRC

#+RESULTS:
| 성별 |  나이 | 몸무게(kg) |  번호 | 신장(cm) | 즐기는 음식 |
|------+-------+------------+-------+----------+-------------|
|    1 | 27.71 |      72.29 |  9.71 |   174.07 |        2.21 |
|    2 | 30.50 |      61.00 | 12.33 |   161.33 |        1.83 |

~apply~ 함수는 ~DataFrame~ 의 각 셀에 인자로 오는 함수를 적용한 결과로 이루어진 새 ~DataFrame~ 을 반환합니다.

이번에는 성별과 함께 좋아하는 음식별로 연령이나 몸무게 등에 차이가 있는지 살펴봅시다.

#+BEGIN_SRC ipython :session :exports code :results raw 
df_pv_2 = pd.pivot_table(df, index=['성별', '즐기는 음식'])
df_pv_2.apply(lambda x: round(x, 2))
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_pv_2.apply(lambda x: round(x, 2)))
#+END_SRC

#+RESULTS:
|        |  나이 | 몸무게(kg) |  번호 | 신장(cm) |
|--------+-------+------------+-------+----------|
| (1, 1) | 27.67 |      76.67 |  4.67 |   177.00 |
| (1, 2) | 27.00 |      71.00 | 10.80 |   173.80 |
| (1, 3) | 28.33 |      71.17 | 11.33 |   172.83 |
| (2, 1) | 32.00 |      57.00 | 14.00 |   160.50 |
| (2, 2) | 30.33 |      63.33 | 14.67 |   162.33 |
| (2, 3) | 28.00 |      62.00 |  2.00 |   160.00 |

#+BEGIN_SRC ipython :session :exports both :results raw
df_pv_3 = pd.pivot_table(df, index='성별', columns='즐기는 음식', values='몸무게(kg)')
df_pv_3.apply(lambda x: round(x, 1))
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_pv_3.apply(lambda x: round(x, 1)))
#+END_SRC

#+RESULTS:
| 성별 |    1 |    2 |    3 |
|------+------+------+------|
|    1 | 76.7 | 71.0 | 71.2 |
|    2 | 57.0 | 63.3 | 62.0 |


** 그래프 그리기

이번에는 간단히 그래프를 그려봅시다.

#+BEGIN_SRC ipython :session :exports none
  %matplotlib inline

  import matplotlib
  import matplotlib.pyplot as plt
  import matplotlib.font_manager as fm

  matplotlib.rc('font', family='Noto Sans CJK KR')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both :results raw :ipyfile outputs/excel-1-plot1.png
  df.plot();
#+END_SRC

#+RESULTS:
[[file:outputs/excel-1-plot1.png]]

나이에 대해서만 그래프를 그려볼까요?


#+BEGIN_SRC ipython :session :exports both :results raw :ipyfile outputs/excel-1-plot2-age.png
  df['나이'].plot();
#+END_SRC

#+RESULTS:

[[file:outputs/excel-1-plot2-age.png]]

나이는 막대그래프가 더 어울릴 것 같습니다.

#+BEGIN_SRC ipython :session :exports both :results raw :ipyfile outputs/excel-1-plot2-age-bar.png
  df['나이'].plot.bar();
#+END_SRC

#+RESULTS:
[[file:outputs/excel-1-plot2-age-bar.png]]


** Correlation

이번에는 컬럼간의 상관관계를 구해볼까요?

#+BEGIN_SRC ipython :session :exports code :results raw
df.corr()
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df.corr())
#+END_SRC

#+RESULTS:
|             |      번호 |      나이 |      성별 |  신장(cm) | 몸무게(kg) | 즐기는 음식 |
|-------------+-----------+-----------+-----------+-----------+------------+-------------|
| 번호        |         1 |  0.228479 |  0.208141 |  -0.31344 |  -0.495021 |   0.0790217 |
| 나이        |  0.228479 |         1 |  0.334697 | -0.147492 |   -0.23975 |   -0.104107 |
| 성별        |  0.208141 |  0.334697 |         1 | -0.765901 |  -0.751269 |   -0.227276 |
| 신장(cm)    |  -0.31344 | -0.147492 | -0.765901 |         1 |   0.882939 |    0.038434 |
| 몸무게(kg)  | -0.495021 |  -0.23975 | -0.751269 |  0.882939 |          1 |   0.0680821 |
| 즐기는 음식 | 0.0790217 | -0.104107 | -0.227276 |  0.038434 |  0.0680821 |           1 |

사실 지금까지 데이터를 다루는 과정에서 불편한 점이 있었는데, 바로 카테고리 값들을 숫자값처럼 인식하는 것이었습니다. 피벗 테이블에서 성별이나 번호에 대한 평균값을 표시해주는 것처럼요.

이 시점에서 각 컬럼에 올바른 데이터 타입을 지정해봅시다.

#+BEGIN_SRC ipython :session :exports code :results raw
  df_dtype = pd.read_excel('assets/엑셀과정실습생.xlsx', sheet_name='Sheet1',
                           index_col=0,
                           dtype={'번호': 'object', '성별': 'object', '즐기는 음식': 'object'})
  df_dtype
#+END_SRC

번호, 성별, 즐기는 음식은 문자열 타입이라고 지정해주었습니다.

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_dtype)
#+END_SRC

#+RESULTS:
| 번호 | 나이 | 성별 | 신장(cm) | 몸무게(kg) | 즐기는 음식 |
|------+------+------+----------+------------+-------------|
|    1 |   30 |    1 |      183 |         82 |           1 |
|    2 |   28 |    2 |      160 |         62 |           3 |
|    3 |   27 |    1 |      178 |         77 |           2 |
|    4 |   23 |    1 |      172 |         70 |           2 |
|    5 |   25 |    1 |      168 |         72 |           3 |
|    6 |   27 |    1 |      179 |         77 |           1 |
|    7 |   26 |    1 |      169 |         71 |           1 |
|    8 |   29 |    1 |      171 |         75 |           3 |
|    9 |   34 |    2 |      158 |         60 |           2 |
|   10 |   31 |    1 |      183 |         77 |           3 |
|   11 |   26 |    2 |      162 |         59 |           1 |
|   12 |   26 |    1 |      173 |         70 |           2 |
|   13 |   35 |    1 |      173 |         68 |           3 |
|   14 |   24 |    1 |      176 |         66 |           3 |
|   15 |   29 |    2 |      170 |         70 |           2 |
|   16 |   33 |    1 |      177 |         72 |           2 |
|   17 |   38 |    2 |      159 |         55 |           1 |
|   18 |   26 |    1 |      166 |         69 |           3 |
|   19 |   26 |    1 |      169 |         66 |           2 |
|   20 |   28 |    2 |      159 |         60 |           2 |

이 ~DataFrame~ 에 대해서 상관관계를 구해볼까요?

#+BEGIN_SRC ipython :session :exports code :results raw
df_dtype.corr()
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_dtype.corr())
#+END_SRC

#+RESULTS:
|            |      나이 |  신장(cm) | 몸무게(kg) |
|------------+-----------+-----------+------------|
| 나이       |         1 | -0.147492 |   -0.23975 |
| 신장(cm)   | -0.147492 |         1 |   0.882939 |
| 몸무게(kg) |  -0.23975 |  0.882939 |          1 |

이제 연속된 값을 나타내는 컬럼에 대해서만 상관관계를 구한 것을 볼 수 있습니다.

앞서 살펴보았던 피벗테이블도 어떻게 달라졌는지 살펴볼까요?

#+BEGIN_SRC ipython :session :exports code :results raw
pd.pivot_table(df_dtype, index='성별')
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(pd.pivot_table(df_dtype, index='성별'))
#+END_SRC

#+RESULTS:
| 성별 |    나이 | 몸무게(kg) | 신장(cm) |
|------+---------+------------+----------|
|    1 | 27.7143 |    72.2857 |  174.071 |
|    2 | 30.5000 |    61.0000 |  161.333 |

역시 연속값을 가지는 컬럼들만 대상으로 피벗테이블을 만듭니다.

여러 층위의 index에 대해서도 그러합니다.

#+BEGIN_SRC ipython :session :exports code :results raw
pd.pivot_table(df_dtype, index=['성별', '즐기는 음식'])
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(pd.pivot_table(df_dtype, index=['성별', '즐기는 음식']))
#+END_SRC

#+RESULTS:
|        |    나이 | 몸무게(kg) | 신장(cm) |
|--------+---------+------------+----------|
| (1, 1) | 27.6667 |    76.6667 |  177.000 |
| (1, 2) | 27.0000 |    71.0000 |  173.800 |
| (1, 3) | 28.3333 |    71.1667 |  172.833 |
| (2, 1) | 32.0000 |    57.0000 |  160.500 |
| (2, 2) | 30.3333 |    63.3333 |  162.333 |
| (2, 3) | 28.0000 |    62.0000 |  160.000 |


** 컬럼 추가, 변형

종종 연속된 값을 일정 범주로 구분해야 하는 경우가 있습니다. 이를테면 13세를 10대, 23세를 20대 이렇게 말이죠. 이런건 어떻게 처리할까요?

 - 날짜 범주화, 연령대 범주화


#+BEGIN_SRC ipython :session :exports code :results raw
def categorize_age(age):
    return '{}~{}세'.format(age // 5 * 5, (age // 5 + 1) * 5-1)

df_dtype['연령대'] = df_dtype['나이'].apply(categorize_age)
df_dtype
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_dtype)
#+END_SRC

#+RESULTS:
| 번호 | 나이 | 성별 | 신장(cm) | 몸무게(kg) | 즐기는 음식 | 연령대  |
|------+------+------+----------+------------+-------------+---------|
|    1 |   30 |    1 |      183 |         82 |           1 | 30~34세 |
|    2 |   28 |    2 |      160 |         62 |           3 | 25~29세 |
|    3 |   27 |    1 |      178 |         77 |           2 | 25~29세 |
|    4 |   23 |    1 |      172 |         70 |           2 | 20~24세 |
|    5 |   25 |    1 |      168 |         72 |           3 | 25~29세 |
|    6 |   27 |    1 |      179 |         77 |           1 | 25~29세 |
|    7 |   26 |    1 |      169 |         71 |           1 | 25~29세 |
|    8 |   29 |    1 |      171 |         75 |           3 | 25~29세 |
|    9 |   34 |    2 |      158 |         60 |           2 | 30~34세 |
|   10 |   31 |    1 |      183 |         77 |           3 | 30~34세 |
|   11 |   26 |    2 |      162 |         59 |           1 | 25~29세 |
|   12 |   26 |    1 |      173 |         70 |           2 | 25~29세 |
|   13 |   35 |    1 |      173 |         68 |           3 | 35~39세 |
|   14 |   24 |    1 |      176 |         66 |           3 | 20~24세 |
|   15 |   29 |    2 |      170 |         70 |           2 | 25~29세 |
|   16 |   33 |    1 |      177 |         72 |           2 | 30~34세 |
|   17 |   38 |    2 |      159 |         55 |           1 | 35~39세 |
|   18 |   26 |    1 |      166 |         69 |           3 | 25~29세 |
|   19 |   26 |    1 |      169 |         66 |           2 | 25~29세 |
|   20 |   28 |    2 |      159 |         60 |           2 | 25~29세 |


#+BEGIN_SRC ipython :session :exports code :results raw
df_cat_pv = pd.pivot_table(df_dtype, index='연령대', columns='즐기는 음식', values='몸무게(kg)')
df_cat_pv.apply(lambda x: round(x, 1))
#+END_SRC

#+BEGIN_SRC ipython :session :exports result :results output raw
tab(df_cat_pv.apply(lambda x: round(x, 1)))
#+END_SRC
#+RESULTS:
| 연령대  |    1 |    2 |    3 |
|---------+------+------+------|
| 20~24세 |  nan | 70.0 | 66.0 |
| 25~29세 | 69.0 | 68.6 | 69.5 |
| 30~34세 | 82.0 | 66.0 | 77.0 |
| 35~39세 | 55.0 |  nan | 68.0 |


** Row 필터링
