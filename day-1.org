* 1일차

교육목표

 - Python 개발 환경을 구축할 수 있다.
 - 기초적인 Python 스크립트를 작성하고 실행할 수 있다.

** 개발환경 구축하기

5일간 진행되는 본 강의에서는, [[https://www.anaconda.com][Anaconda]]를 사용하여 수업을 진행할 예정입니다. Anaconda는 기본 Python 환경에 데이터 분석을 위해 필요한 여러 도구들을 추가한, 일종의 모음집(배포본, distribution)입니다. 이후의 수업을 진행하기에 앞서, Anaconda를 먼저 다운로드 받고 시작합시다.

Anaconda는 [[https://www.anaconda.com/download/][공식 홈페이지]]에서 설치할 수 있는데, 한국에서 받기에는 속도가 다소 느립니다. 중국 칭화대에서 제공하는 [[https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/][미러사이트]]를 이용하면 더 빠르게 받을 수 있습니다.

*** Py2 or Py3?

Python을 사용할 때는, 2017년 현재 기준으로, 버전을 선택해야 합니다. 보통 python2를 선택할 것이냐 python3를 선택할 것이냐를 결정해야 하는데, 본 강의에서는 python3 버전을 사용하도록 하겠습니다. Anaconda에서도 python 버전에 따라 적절한 배포본을 사용할 수 있도록 구분하여 제공하고 있습니다. 

*** 32bit or 64bit?

그 다음으로는, 32bit를 사용할 것인지 64bit를 사용할 것인지 선택해야 합니다. 대개의 경우 64bit를 선택해도 무방하나, 간혹 외부 패키지를 사용할 때 32bit만을 지원하는 패키지들이 있는 경우에는 32bit를 사용해야 합니다.

본 강의에서는 특별히 32bit의 제한을 받는 외부 라이브러리를 사용하지 않기 때문에 64bit를 설치하시면 됩니다.


** 학습 목표 공유

각자 이 워크샵을 수강할 때 기대했던 바 및 목표를 공유해봅시다.


** Python이란?

Python은 범용 프로그래밍 언어 중 하나입니다. Guido van Rossum에 의해 [[http://python-history.blogspot.kr/2009/01/brief-timeline-of-python.html][1990년에 발표]]되었습니다. 처음에는 '[[https://www.python.org/doc/essays/cp4e/][모두를 위한 컴퓨터 프로그래밍]]'을 표방하며 일종의 교육용 언어로 출발했지만, 대중적 인기를 얻으며 범용 프로그래밍 언어로 발달했습니다. 현재는 많은 소프트웨어 개발자들에게 [[https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted][사랑받는 언어]] 중 하나이고, 특히 데이터 분석/과학분야에서도 많이 활용되고 있습니다.

특히 Python은 인터프리터 언어로, 별도의 컴파일 과정을 거치지 않고 간편하게 실행할 수 있는 특징을 가지고 있습니다.


** 데이터 분석에서 Python이 가지는 장점?

범용 프로그래밍 언어이기 때문에, R이나 MATLAB 등 데이터 분석에 적합한 소프트웨어와는 달리, 데이터 분석 이외의 분야에서도 널리 활용됩니다. 그리고 라이브러리가 매우 풍부합니다.

때문에 데이터 분석에서 가지는 장점으로는, 데이터 분석 과정 및 결과를 웹 애플리케이션으로 만들어 게시한다던지 하는, 데이터 분석 이외의 작업과 연계하기가 쉽습니다.


** Literate Programming, Reproducible Research

사회과학 분석에서는 데이터를 엑셀로 가지고 있는 경우가 많지요. 엑셀이 참 다루기도 쉽고, 눈으로 데이터를 확인할 수 있기 때문에 더 직관적입니다.

하지만, 원천 데이터를 엑셀로 확정한 이후에는 어떨까요?

데이터가 확보되면 분석 작업에 들어갑니다. 엑셀이나 SPSS, 혹은 SAS 등으로 분석을 합니다. 분석을 하면서 분석 결과로 나오는 표나 그래프들이 생깁니다. 중간 결과물 파일이나 시트들도 엄청 많이 쌓이게 되죠. 그런데 이 결과물들이 어떤 분석을 거쳐서 나왔는지 헷깔리기 시작합니다. 분석은 탐색적으로 이루어지는 경우가 많기 때문에 분석에 분기가 생기기 시작합니다. 파일명이 복잡해집니다. 파일 이름이나 시트 이름으로만 중간 과정을 설명해야 합니다. SAS는 좀 낫겠지만, 다른 도구들의 경우에는 분석 오퍼레이션들이 클릭으로 이루어지기 때문에 분석 과정을 replay한다는 것이 불가능합니다.

그리고 분석을 마치면 문서를 작성합니다. 연구에 대해서 글을 쓰고, 결과를 설명하면서 분석 과정에서 나온 그래프를 하나씩 가져다가 삽입합니다. 혹여라도 결과가 신통치 않아서 분석을 다시 해야 한다면 난감해집니다. 중간 결과물 파일들도 다시 생성해야 할 뿐 아니라, 그래프나 표 등도 새로 가져다가 붙여야 합니다.

[[file:./assets/python-basic-day1-reproducible-research.png]]

다들 경험해보셨나요?

우선, 위의 상황에서는 분석이라는 '과정'에 대해 기술하지 않습니다. 과정은 사라지고 중간 결과물들만 남습니다. 과정은 기억 속에서 희미하게 남아있는데, 그것도 점점 복잡해지면 핸들링하기가 어려워집니다. 그리고 또한 위의 상황에서는 분석과 결과 문서가 분리되어 있습니다.

그렇다면, 과정을 기술한다면 어떨까요? 파이썬이나 R 등, 언어를 사용해서 분석 과정을 묘사할 수 있습니다. 엑셀은 언어가 아니죠. 엑셀 클릭에서는 의도가 드러나지 않습니다. R이나 파이썬을 "프로그래밍" 언어라고 인식하기 이전에, 분석 과정을 일련의 포멀한 형식 언어로 표현한다고 생각해봅시다. 그래서 분석 과정을 묘사할 뿐 아니라, 그 묘사된 분석 과정을 그대로 수행해서 결과물(표, 그래프 등)도 만들어주고, 최종 보고서와 결과물이 분리되지 않은 채 한 문서 안에서 관리될 수 있다면요?

아래는 무작위의 10개의 숫자를 생성하는 코드입니다.

#+BEGIN_SRC ipython :session :exports both :results raw
%matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.Series(np.random.randint(1, 100, size=10))
df
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
0    61
  1    72
  2    42
  3    53
  4     9
  5    31
  6     9
  7    24
  8    90
  9    47
  dtype: int64
#+END_EXAMPLE


그리고 선 그래프를 그립니다.

#+BEGIN_SRC ipython :session :ipyfile outputs/day1-example-plot.png :exports both :results raw
df.plot();
#+END_SRC

#+RESULTS:
[[file:outputs/day1-example-plot.png]]

이렇듯 언어를 사용하여 분석의 과정을 기술할 뿐만 아니라 그것을 실행하고, 문서화와 합께 통합하는 것이 최근 많이 이야기되고 있는 '/reproducible research/', 즉 '/재현 가능한 연구/'의 핵심이라고 할 수 있습니다.

Python이나 R을 배우다 보면, 모든 것을 Python이나 R로 만들어보려는 욕심이 생기기도 합니다. 하지만 데이터를 모으고 정리하는 단계까지 파이썬이나 R로 하려는건 좀 무리일 수 있습니다. 그건 엑셀이 더 편합니다. 시각적으로 잘 인식되고, 직관적으로 변경이 가능합니다.

하지만 원천 데이터가 확정된 이후에는, 파이썬이나 R 등 언어를 사용해서 분석을 기술하는 연습을 하면 데이터 분석가로서 큰 자산이 될 것이라고 생각합니다.


*** 문학적 프로그래밍이란?

컴퓨터 과학자인 Donald Knuth(도널드 크누쓰) 교수가 제안한 개념입니다. 컴퓨터 프로그램을 작성할 때, 프로그래밍 언어를 사용하여 코드를 작성하는데, 프로그래밍 언어만으로는 코드의 의도나 구조 등을 충분히 설명하기 어려운 경우가 많습니다.
 
문학적 프로그래밍이란, 프로그래밍 언어를 주석이나 해설과 함께 혼용하여 코드를 작성하고, 프로그램을 실행할 때는 주석이나 해설 부분을 제외한 코드만을 사용하고, 설명서 등을 제작할 때는 코드를 제외한 주석이나 해설 부분을 사용하여 문서를 생성하자는 개념입니다.

지금까지는 일반적으로는 잘 활용되지 않다가, 최근 /재현 가능한 연구/ 가 주목받기 시작하면서, 문학적 프로그래밍의 개념을 활용하여 데이터 분석 코드를 작성하는 경우가 많아지고 있습니다.


*** 재현 가능한 연구란?

논문이나 연구에서 수행한 분석 과정을 다른 연구자들도 그대로 재현할 수 있도록 하자는 운동입니다. 그러기 위해서는 데이터 뿐만 아니라 분석 과정도 개념적인 수준이 아니라 아주 구체적인 절차를 설명할 필요가 있고, 최근 머신러닝, 인공지능 등의 연구에서는 가벼운 웹 출판물의 경우 코드와 실행 결과를 문서 중간에 그대로 삽입하는 경우도 종종 볼 수 있습니다.


** Anaconda 설치하고 Spyder 사용하기

아마 지금쯤 Anaconda가 모두 다운로드 되었을 것 같네요. 실행하여 설치해줍니다.

Anaconda에서 기본적으로 제공되는 Spyder라는 편집기를 사용해서 파이썬 파일을 작성해봅시다. 우선, 시작 메뉴에서 Spyder를 찾아 실행해줍니다.

[[file:assets/python-basic-day1-spyder-launch.png]]

아래와 같은 화면을 볼 수 있습니다.

[[file:assets/python-basic-day1-spyder-window.png]]

좌측에는 파일을 편집할 수 있는 에디터가 있고, 오른쪽 아래에는 코드를 실행해볼 수 있는 창이 있습니다.

좌측에 아래와 같은 코드를 적고, 키보드에서 =F5= 를 눌러 실행해봅시다.

#+BEGIN_SRC python
print('hello')
#+END_SRC

그러면 우하단의 콘솔 창에 실행 결과가 나타납니다.


** Python 언어의 기초 1

우선, Python 언어의 기초적인 내용에 대해 알아봅시다.

여러분이 어느 하나의 프로그래밍 언어에 익숙하다면, 새로운 언어를 배우는데 유리합니다. 기본적으로 공유하는 개념들이 있기 때문이지요. 이런 경우, [[https://learnxinyminutes.com/][Learn X in Y minutes]] 사이트를 활용하면 새로운 언어의 특징을 한 눈에 살펴보기 좋습니다. 


*** 출력문

우선 간단한 것들부터 살펴보지요. 우선 출력문과 간단한 사칙연산자입니다.

새 파일 =File > New File= 을 만들고 저장 =Ctrl-S= 한 후, 아래와 같이 입력하세요.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

# 문자열
print('Hello')
print('안녕하세요?')
# 더하기
print(1 + 1)
# 빼기
print(3 - 2)
# 곱하기
print(2 * 3)
# 나누기
print(10 / 4)
# 나머지
print(10 % 3)
# 몫
print(10 // 3)
#+END_SRC

#+RESULTS:
: Hello
: 안녕하세요?
: 2
: 1
: 6
: 2.5
: 1
: 3

=F5= 를 눌러 실행해봅시다. 쉽지요?

위에서 살펴본 사칙연산자 이외에도, =and=, =or=, =not= 과 같은 부울 연산자도 있습니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

print(True)
print(False)
print(True and False)
print(True or False)
print(not True)
print(not False)
#+END_SRC

#+RESULTS:
: True
: False
: False
: True
: False
: True


*** 변수 할당

값을 기억해두고 재사용하려면 변수를 활용합니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

a = 10
b = 20
print(a + b)

c = 10
c = c + 20
c = c + 30
c = c + 40
c = c + 50
c = c / 5
print(c)
#+END_SRC

#+RESULTS:
: 30
: 30.0

*** 반복문: for, while, break

일정한 행동들을 반복해서 하게 하는 명령입니다.

기본적으로 가장 많이 사용하는 =for= 구문의 형태는 아래와 같습니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

for i in range(10):
   print(i, end='')
   print(',', end=' ')
#+END_SRC

#+RESULTS:
: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

=for= 문은 =for A in B= 형태로 이루어집니다. =in= 뒤에 오는 B 부분에는 반복할 수 있는 값이 올 수 있고, 각 원소를 반복하며 그 값이 =A= 에 저장됩니다.

여기서 처음으로 블럭(block)이 등장했습니다. 위 코드에서 print 구문이 있는 행이 블럭입니다. Python에서 블럭은 들여쓰기로 표현되며, 같은 등위의 명령문들을 표현합니다. 

아래 코드는 위의 코드와 다르게 동작합니다. =for= 구문이 실행되는 동안 =,= 가 매번 출력되지 않고, =for= 문을 벗어난 뒤 한 번만 출력됩니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

for i in range(10):
   print(i, end='')
print(',', end=' ')
#+END_SRC

#+RESULTS:
: 0123456789, 

Python에서는 들여쓰기가 매우 중요합니다. 같은 블럭의 코드들은 공백이나 탭의 갯수가 동일해야 합니다. 공백이나 탭의 갯수가 서로 일치하지 않는 경우, 'IndentationError: unexpected indent' 오류가 발생하거나 의도하지 않은 동작을 할 수 있습니다.

다시 반복문으로 돌아와서, =while= 문은 조건이 참일 동안 블럭 안의 내용을 반복해서 수행합니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

import random
s = 0

while s < 50:
  s = s + random.randint(0, 10)

print(s)
#+END_SRC

#+RESULTS:
: 53

만약 =for= 문이나 =while= 문을 수행하는 도중에 반복 구문을 벗어나려면 =break= 구문을 사용합니다. 다음 섹션의 조건문에서 활용 사례를 보겠습니다.

*** 조건문: if

특정한 조건을 만족할 때만 일련의 행동들을 수행하게 하는 명령입니다.


*** 연습문제

 NetworkX 사용해서

  - for문 사용해서 노드 추가하기
  - 노드 이름 부여하기
  - 

#+BEGIN_SRC ipython :session :exports both :results raw :ipyfile outputs/day1-example-nx.png 
%matplotlib inline
import networkx as nx

G = nx.Graph()
G.add_node('1')
G.add_node('2')
G.add_edge('1', '2')
nx.draw(G)
#+END_SRC

#+RESULTS:
[[file:outputs/day1-example-nx.png]]




** Python 언어의 기초 2

*** 자료형 (Type)

Python3에는 아래와 같은 주요 자료형(type)이 있습니다.

 - Boolean types: None, True, False
 - Numeric types: int, float
 - Sequence types: list, tuple
 - Text sequence types: str
 - Byte sequence types: bytes

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-
True
#+END_SRC

#+RESULTS:

*** 함수


*** 클래스


*** 파일 읽기

텍스트 파일을 열어 한줄씩 읽어들이는 구문은 아래와 같습니다. (아래 코드를 실행하기 전에 먼저 [[file:assets/day1-example-read.txt][텍스트 파일]]을 assets 디렉토리 아래에 저장해야 합니다.)

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

fin = open('assets/day1-example-read.txt')
for line in fin:
   print(line, end='')
fin.close()
#+END_SRC

#+RESULTS:
: ID,Sex,Age,Programming?,Python?
: 1,M,25,T,T
: 2,F,27,T,F
: 3,F,24,F,F
: 4,F,25,T,T
: 5,M,32,F,F
: 6,M,39,T,F

위 예제는 아래와 같이 줄여서 쓸 수 있습니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

with open('assets/day1-example-read.txt') as fin:
   for line in fin:
      print(line, end='')
#+END_SRC

여기서 =with A as B= 구문이 등장하는데, =with= 구문은 자신의 범위를 벗어난 경우 적절한 리소스 반환 작업을 수행합니다. (모든 리소스에 =with= 구문을 사용할 수 있는 것은 아닙니다.)




*** 문자열 다루기

  - split
  - contains(in)
  - find, rfind
  - regex
  - slicing
  - encoding
  - startswith

*** 연습문제

 뭘 할까...?

  - 설문조사한 것 통계내기?
    - 성별에 따른 프로그래밍 경험 유무 빈도 및 비율
    - 연령대에 따른 프로그래밍 경험 유무 빈도 및 비율
    - 프로그래밍 경험 유무에 따른 파이썬 경험 유무 비율
  - 웹 크롤링?

 if, for, encoding

 #+BEGIN_SRC python :results output

 #+END_SRC



** Jupyter notebook 실행하기

Jupyter notebook은, 대화형으로 데이터 분석 등의 작업을 용이하게 하기 위해서 만들어진 개발 환경입니다.[fn:jupyter-ipython]

우선, Anaconda Prompt를 실행합니다. Anaconda를 설치하면 시작 메뉴에 아래와 같은 메뉴 항목이 등록됩니다.

[[file:assets/python-basic-day1-anaconda-prompt-menu.png]]

프롬프트를 띄웁니다.

[[file:assets/python-basic-day1-anaconda-prompt-console.png]]

아래 명령을 타이핑하여 Jupyter Notebook을 실행합니다.

#+BEGIN_EXAMPLE
> jupyter notebook
#+END_EXAMPLE

아래와 같은 내용이 출력되면서, 웹브라우저가 열립니다. 웹브라우저가 열리지 않을 경우에는, 아래에서 볼 수 있는 URL (이 경우에는 =http://localhost:8889/?token=cba5e423ed44d8c6d9a2b2bb46ffa1383b7c88ad5bc1c9b7= 이고, 실행 환경마다 값은 다릅니다.)을 자주 사용하는 웹브라우저에서 열어줍니다.

#+BEGIN_EXAMPLE
[I 10:47:27.203 NotebookApp] Writing notebook server cookie secret to C:\Users\torac\AppData\Roaming\jupyter\runtime\notebook_cookie_secret
[I 10:47:27.419 NotebookApp] The port 8888 is already in use, trying another port.
[I 10:47:27.509 NotebookApp] JupyterLab alpha preview extension loaded from C:\Users\torac\Anaconda3\lib\site-packages\jupyterlab
JupyterLab v0.27.0
Known labextensions:
[I 10:47:27.509 NotebookApp] Running the core application with no additional extensions or settings
[I 10:47:27.974 NotebookApp] Serving notebooks from local directory: C:\Users\torac
[I 10:47:27.974 NotebookApp] 0 active kernels
[I 10:47:27.974 NotebookApp] The Jupyter Notebook is running at: http://localhost:8889/?token=cba5e423ed44d8c6d9a2b2bb46ffa1383b7c88ad5bc1c9b7
[I 10:47:27.974 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 10:47:27.990 NotebookApp]

    Copy/paste this URL into your browser when you connect for the first time,
    to login with a token:
        http://localhost:8889/?token=cba5e423ed44d8c6d9a2b2bb46ffa1383b7c88ad5bc1c9b7
[I 10:47:30.775 NotebookApp] Accepting one-time-token-authenticated connection from ::1
#+END_EXAMPLE

그러면 아래와 같은 Jupyter Notebook 화면을 볼 수 있습니다.

[[file:assets/python-basic-day1-jupyter-directory-listing.png]]

가장 처음 나오는 화면은 홈 디렉토리에 존재하는 파일 목록입니다. 위 화면에서처럼 New 아이콘을 클릭하여 새로운 노트북을 만들어봅시다.

아래와 같은 화면을 볼 수 있습니다.

=In [ ]= 옆에 텍스트를 입력할 수 있는 란이 있습니다. 그 하나의 단위를 Cell이라고 합니다. Cell에는 Python 코드를 적을 수도 있고, Markdown 형식으로 글을 적을 수도 있습니다. 상단 메뉴 중 Cell이라는 메뉴가 있고, 그 하위 메뉴에 Cell Type이 있습니다. 그 하위에는 Code와 Markdown이 있습니다. 이 메뉴를 사용하여 Cell의 종류를 변경할 수 있습니다.

[[file:assets/python-basic-day1-jupyter-new-notebook.png]]



[fn:jupyter-ipython] Jupyter라는 이름은 중간에 바뀐 이름이고, 그 이전에는 IPython (Interactive Python)이라는 이름을 사용했습니다. 그래서 현재 Jupyter에도 IPython 시절의 흔적들이 많이 남아있습니다. Jupyter notebook 파일의 이름도 .ipynb 확장자를 사용하는데, IPython Notebook의 줄임말입니다.

