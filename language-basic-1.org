* Python 언어의 기초 1

우선, Python 언어의 기초적인 내용에 대해 알아봅시다.

여러분이 어느 하나의 프로그래밍 언어에 익숙하다면, 새로운 언어를 배우는데 유리합니다. 기본적으로 공유하는 개념들이 있기 때문이지요. 이런 경우, [[https://learnxinyminutes.com/docs/python3/][Learn X in Y minutes]] 사이트를 활용하면 새로운 언어의 특징을 한 눈에 살펴보기 좋습니다.

이 워크샵 이후에 Python을 종합적이고 체계적으로 학습하기 원한다면, [[https://docs.python.org/3/index.html][Python 공식문서]]의 [[https://docs.python.org/3/tutorial/index.html][튜토리얼]]을 권합니다. Python은 문서화가 매우 잘 되어 있기 때문에, 공식문서에 익숙해지는 것이 좋습니다. 

(여기서 '익숙해진다'고 표현한 것은, 궁금한 것을 구글 등으로 찾았을 때, '아, 영어네? 현기증 난다. 다른 문서 없나?' 하고 창을 닫는 대신, '아, 공식문서네? 다른 어떤 문서보다 더 정확하고 풍부한 정보가 담겨있겠군' 하고 생각하고 문서를 읽어본다는 의미입니다.)

기본적인 Python 언어에 익숙해졌다면, 주요한 라이브러리들을 익힐 차례입니다. [[https://docs.python.org/3/library/index.html][Python 표준 라이브러리]] 문서를 둘러보셔도 좋고, 워크샵 3-4일차에 데이터를 다루는데 주요하게 활용할 라이브러리인 [[https://pandas.pydata.org/pandas-docs/stable/][Pandas 패키지의 문서]]를 둘러보셔도 좋습니다.

** 출력문

우선 간단한 것들부터 살펴보지요. 우선 출력문과 간단한 사칙연산자입니다.

새 파일 =File > New File= 을 만들고 저장 =Ctrl-S= 한 후, 아래와 같이 입력하세요.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

# 문자열
print('Hello')
print('안녕하세요?')
# 더하기
print(1 + 1)
# 빼기
print(3 - 2)
# 곱하기
print(2 * 3)
# 나누기
print(10 / 4)
# 나머지
print(10 % 3)
# 몫
print(10 // 3)
#+END_SRC

#+RESULTS:
: Hello
: 안녕하세요?
: 2
: 1
: 6
: 2.5
: 1
: 3

=F5= 를 눌러 실행해봅시다. 쉽지요?

위에서 살펴본 사칙연산자 이외에도, =and=, =or=, =not= 과 같은 부울 연산자도 있습니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

print(True)
print(False)
print(True and False)
print(True or False)
print(not True)
print(not False)
#+END_SRC

#+RESULTS:
: True
: False
: False
: True
: False
: True

아래와 같은 Equality check를 위한 연산자들도 있습니다.

 - ==
 - !=
 - >
 - <
 - >=
 - <=

#+BEGIN_SRC python :results output :exports both
a = True
print(10 == 10)
print(10 != 10)
print(10 > 5)
print(10 < 5)
print(a is True)
#+END_SRC

#+RESULTS:
: True
: False
: True
: False
: True


** 변수 할당

값을 기억해두고 재사용하려면 변수를 활용합니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

a = 10
b = 20
print(a + b)

c = 10
c = c + 20
c = c + 30
c = c + 40
c = c + 50
c = c / 5
print(c)
#+END_SRC

#+RESULTS:
: 30
: 30.0


** 반복문: for, while, continue, break

일정한 행동들을 반복해서 하게 하는 명령입니다.

기본적으로 가장 많이 사용하는 =for= 구문의 형태는 아래와 같습니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

for i in range(10):
   print(i, end='')
   print(',', end=' ')
#+END_SRC

#+RESULTS:
: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

=for= 문은 =for A in B= 형태로 이루어집니다. =in= 뒤에 오는 B 부분에는 반복할 수 있는 값이 올 수 있고, 각 원소를 반복하며 그 값이 =A= 에 저장됩니다.

여기서 처음으로 블럭(block)이 등장했습니다. 위 코드에서 print 구문이 있는 행이 블럭입니다. Python에서 블럭은 들여쓰기로 표현되며, 같은 등위의 명령문들을 표현합니다. 

아래 코드는 위의 코드와 다르게 동작합니다. =for= 구문이 실행되는 동안 =,= 가 매번 출력되지 않고, =for= 문을 벗어난 뒤 한 번만 출력됩니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

for i in range(10):
   print(i, end='')
print(',', end=' ')
#+END_SRC

#+RESULTS:
: 0123456789, 

Python에서는 들여쓰기가 매우 중요합니다. 같은 블럭의 코드들은 공백이나 탭의 갯수가 동일해야 합니다. 공백이나 탭의 갯수가 서로 일치하지 않는 경우, 'IndentationError: unexpected indent' 오류가 발생하거나 의도하지 않은 동작을 할 수 있습니다.

다시 반복문으로 돌아와서, =while= 문은 조건이 참일 동안 블럭 안의 내용을 반복해서 수행합니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

import random
s = 0

while s < 50:
  s = s + random.randint(0, 10)

print(s)
#+END_SRC

#+RESULTS:
: 53

만약 =for= 문이나 =while= 문을 수행하는 도중에 반복 구문을 벗어나려면 =break= 구문을 사용합니다. =continue= 구문은 반복 구문을 완전히 벗어나는 대신, 해당 차수의 반복을 건너뜁니다.

위 코드에서 새로 등장한 예약어로 =import= 라는 것이 있는데, 이것은 '확장 기능(모듈)을 불러오는 것'이라고 생각하시면 됩니다. 여기서는 무작위에 대한 기능을 제공해주는 =random= 이라는 모듈을 불러와 사용할 수 있게 합니다.

=random= 모듈의 =randint= 함수는 무작위로 선정할 정수의 [시작, 끝] 범위를 지정하기 위해 두 개의 숫자를 인자로 받습니다.


** 조건문: if

특정한 조건을 만족할 때만 일련의 행동들을 수행하게 하는 명령입니다.

#+BEGIN_SRC python :results output :exports both
# -*- coding: utf-8 -*-

import random
s = 0

while True:
  s = s + random.randint(0, 10)
  if s > 50:
    break
  print(s, end=' ')
#+END_SRC

#+RESULTS:
: 3 7 17 25 34 40 40 45 


** 연습문제

이쯤해서 NetworkX 사용해서 네트워크 그래프를 한번 그려봅시다.

#+BEGIN_SRC ipython :session :exports both :results raw :ipyfile outputs/day1-example-nx.png 
%matplotlib inline
import networkx as nx

G = nx.Graph()
G.add_node(1)
G.add_node(2)
G.add_edge(1, 2)

pos = nx.spring_layout(G)
nx.draw_networkx_edges(G, pos, alpha=0.2);
nx.draw_networkx_nodes(G, pos, node_size=50);
#+END_SRC

#+RESULTS:
[[file:outputs/day1-example-nx.png]]

위의 예제를 아래와 같이 변경해보세요.

 - =for= 문을 사용하여 node를 50개 추가하기
 - =random.randint()= 를 사용하여 edge 100개 추가하기

#+BEGIN_SRC ipython :session :exports results :results raw :ipyfile outputs/day1-exercise-1.png
%matplotlib inline
import networkx as nx
import random

G = nx.Graph()
for n in range(50):
   G.add_node(n)

for i in range(100):
   node_a = random.randint(0, 50)
   node_b = random.randint(0, 50)
   G.add_edge(node_a, node_b)

pos = nx.spring_layout(G)
nx.draw_networkx_edges(G, pos, alpha=0.2);
nx.draw_networkx_nodes(G, pos, node_size=50);
#+END_SRC

#+RESULTS:
[[file:outputs/day1-exercise-1.png]]
